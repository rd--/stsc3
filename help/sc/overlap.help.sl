# overlap -- texture generator

- _overlap(aProcedure, sustainTime, transitionTime, overlap)_

Schedules a periodic process on the _workspace::clock_ to evalute _aProcedure()_, which should construct a Ugen graph, and apply a self-releasing envelope with attack and release times equal to _transitionTime_ and a sustain time equal to _sustainTime_ to the answer, and sends the result to the synthesiser.

The process runs at the interval _sustainTime + (transitionTime * 2) / overlap_, so there will be at most _overlap_ number of instances of the sound playing together.

Texture of overlapping sine tones:

```
{
	{
		SinOsc(Rand(220, 990), 0)
	} ! 2 * 0.1
}.overlap(3, 3, 3)
```

The program below plays a simple texture of overlapping seven note chords, predominantly consisting of sine tones.
The two branches of the _if_ clause are written as trailing procedures.

```
{
	{
		var freq = IRand(48, 72).MidiCps;
		(4 / 5).coin.if {
			SinOsc(freq, 0) * Rand(0.05, 0.1)
		} {
			Saw(freq) * Rand(0.01, 0.05)
		}
	}.dup(7).Splay2 / 7
}.overlap(3, 3, 3)
```

The program below generates a simple texture, chords are generated by frequency shifting a sine tone.
The dictionary form of the Ugen constructors _SinOsc_ and _FreqShift_ are used to label each parameter.

	{
		var oct = [36, 48, 60].atRandom;
		var note = [0, 2, 4, 5, 7, 9, 11].atRandom;
		var freq = (oct + note).MidiCps;
		var osc = SinOsc(freq: freq, phase: 0) * 0.1;
		var left = osc + FreqShift(
			in: osc,
			freq: freq * 1.5,
			phase: 0
		);
		var right = FreqShift(
			in: left,
			freq: SinOsc(freq: 3.23, phase: 0) * 5,
			phase: 0
		);
		[left, right] / 3
	}.overlap(3, 3, 3)

* * *

See also: _OverlapTexture_
