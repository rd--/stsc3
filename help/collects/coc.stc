// wandering sines ; https://github.com/cianoc/supercollider_fragments
var o = SinOsc((LFNoise1(0.5) * 600 + (LFSaw(1.5, 0) * 50 + 500)).abs, 0) * 0.1;
var d = CombN(o, 3.0, #[1.35, 0.7], 6);
Pan2(o, 0, 1) + d

// random sine waves ; https://github.com/cianoc/supercollider_fragments
var f = { Pan2(SinOsc(SinOsc(1 / 10, 0.0.rand(6.0)) * 200 + 600, 0), 1.0.rand, 0.05) };
f.dup(15).splay

// nice use of blip ; https://github.com/cianoc/supercollider_fragments
var t = Impulse(6, 0);
var o = Blip(TRand(48, 72, t).midicps, TRand(1, 12, t)) * TRand(-0.5, 0.4, t).max(0);
var p = Pan2(o, TRand(-1.0, 1.0, t), EnvPerc(0, 3, 1, #[-4]).envGen(t));
var m = Mix({ p }.dup(6)) * 0.2;
m + CombL(m, 2.0, 4/6, 6)

// interesting rising sounds ; https://github.com/cianoc/supercollider_fragments
var f = { arg c; Pan2(SinOsc(LFSaw((c * 0.2 + 1)/3, 0) * 500 + 700, 0), LFNoise0(1), 0.05) };
1.to(5).collect(f).sum

// use of dust with rising sounds ; https://github.com/cianoc/supercollider_fragments
var f = {
    var s = RingzBank(Dust(1/3) * 0.1, { 1000.exprand(10000) }.dup(3), #[1], { 1.0.rand(4.0) }.dup(15));
    Pan2(s, LFTri(3.0.rand(10.0), 0), 0.1)
};
Mix(f.dup(20))

// pretty ; nice, but inessential ; https://github.com/cianoc/supercollider_fragments
var f = {
    arg i;
    var freq = MouseX(0.1.rand(5.0), 3.0.rand(20.0), 0, 0.2);
    var amp = LFNoise0(MouseX(1.0.rand(6.0), 6.0.rand(1.0), 0, 0.2)).max(0);
    var osc = SinOsc(SinOsc(freq, 0) * MouseY(10, 50, 0, 0.2) + 200.0.rand(5000.0), 0) * amp;
    Pan2(osc, 1.0.rand2, 0.03) };
1.to(12).collect(f).sum

// random impulses ; https://github.com/cianoc/supercollider_fragments
var f = {
    var freq = 100.exprand(3000);
    var amp = EnvPerc(0, (freq ** -0.7) * 100, 1, #[-4]).envGen(Dust(1 / 5));
    Pan2(SinOsc(freq * (LFNoise1(1 / 6) * 0.4 + 1), 0) * amp, LFNoise1(1 / 8), 1) };
f.dup(15).sum * 0.1

// angry birds ; https://github.com/cianoc/supercollider_fragments
var lfo = LFNoise1(#[28, 27]) * 400 + 2000;
SinOsc(lfo, 0) * 0.1

// lasers ; https://github.com/cianoc/supercollider_fragments
SinOsc(EnvADSR(0.1, 0.4, 0.8, 0.5, 1, #[-4]).envGen(Dust(1)).kr * 10000, 0) * 0.1
