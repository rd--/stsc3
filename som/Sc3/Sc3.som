Sc3 = Object (

----------------------------

| IdCounter |

draw: anObject = (
	Sc3 writeTmpWrappedTextSyndefOf: anObject.
	'hsc3-dot scsyndef-draw /tmp/stsc3.scsyndef.text' systemCommand
)

drawFile: fileName = (
	"Draw expression loaded from named file, which may be either an .st or .stc file."
	(Sc3 evalStOrStcFile: fileName) draw
)

evalStOrStcFile: fileName = (
	"Evaluate an expression read from a file.  The file may be either a Smalltalk (.st) or a C-Smalltalk (.stc) file"
	| fileText |
	fileText := (fileName endsWith: '.stc') ifTrue: [Sc3 stcFileToSt: fileName] ifFalse: [fileName readTextFile].
	^fileText evalString
)

evalText: text fromFile: fileName = (
	"Evaluate text, deciding if it needs to be translated from C-Smalltalk based on the name of the file the text is from"
	(fileName endsWith: '.stc') ifTrue: [^(Sc3 stcToSt: text) evalString] ifFalse: [^text evalString]
)

nextId = (
	"Generate a new identifier.  Avoid requiring class initialisation by checking for nil."
	IdCounter isNil ifTrue: [ IdCounter := 0 ] ifFalse: [ IdCounter := IdCounter + 1 ].
	^IdCounter
)

play: anObject = (
	self playUsingUdpWithTemporaryFile: anObject
)

playFile: fileName = (
	"Play expression loaded from named file, which may be either an .st or .stc file."
	(Sc3 evalStOrStcFile: fileName) play
)

playHelpGraphFile: graphFile = (
	"Play help file."
	Sc3 playFile: (Sc3 stsc3HelpGraphFile: graphFile)
)

printUgens: anObject = (
	Sc3 writeTmpWrappedTextSyndefOf: anObject.
	'hsc3-scsynth scsyndef print False /tmp/stsc3.scsyndef.text' systemCommand
)

playUsingBinarySyndef: anObject = (
	Sc3 writeTmpWrappedBinarySyndefOf: anObject.
	'hsc3-scsynth scsyndef play /tmp/stsc3.scsyndef' systemCommand
)

playUsingTextSyndef: anObject = (
	Sc3 writeTmpWrappedTextSyndefOf: anObject.
	'hsc3-scsynth scsyndef play /tmp/stsc3.scsyndef.text' systemCommand
)

playUsingUdpDirectlyEncoded: anObject = (
	| syndef msg |
	syndef := (ScGraph from: (WrapOut bus: 0 channelsArray: anObject) withName: 'tmp') encodeSyndef.
	msg := OscMessage at: '/d_recv' with: {syndef. (OscMessage at: '/s_new' with: #('tmp' -1 0 1)) encodeOsc}.
	msg encodeOsc sendUdpToHost: '127.0.0.1' port: 57110
)

playUsingUdpWithTemporaryFile: anObject = (
	| msg |
	Sc3 writeTmpWrappedBinarySyndefOf: anObject.
	msg := OscMessage at: '/d_load' with: {'/tmp/stsc3.scsyndef'. (OscMessage at: '/s_new' with: #('tmp' -1 0 1)) encodeOsc}.
	msg encodeOsc sendUdpToHost: '127.0.0.1' port: 57110
)

reset = (
	"Reset Sc synthesiser."
	Sc3 resetUsingUdp
)

resetUsingExternalCommand = (
	'hsc3-scsynth reset' systemCommand
)

resetUsingUdp = (
	(OscMessage at: '/g_freeAll' with: #(1)) encodeOsc sendUdpToHost: '127.0.0.1' port: 57110
)

stcFileToSt: fileName = (
	"Translate named C-Smalltalk (.stc) file to Smalltalk (.st), returning translated text."
	| tmp cmd |
	tmp := '/tmp/stcFileToSt.st'.
	cmd := 'stsc3 translate stc st ' , fileName , ' ' , tmp.
	cmd systemCommand.
	(Delay forMilliseconds: 250) wait. "..."
	^tmp readTextFile
)

stcToSt: stcText = (
	"Translate .stc text to .st text."
	| tmp |
	tmp := '/tmp/stcToSt.st'.
	tmp writeTextFile: [ :fd | stcText putOn: fd ].
	^Sc3 stcFileToSt: tmp
)

stsc3Directory = (
	"Name of stsc3 directory."
	^'/home/rohan/sw/stsc3'
)

stsc3File: fileName = (
	"Absolute file name of name given relative to the stsc3 directory."
	^Sc3 stsc3Directory , '/' , fileName
)

stsc3HelpGraphFile: graphFileName = (
	"Absolute file name of name given relative to the help graph directory of stsc3."
	^Sc3 stsc3File: 'help/graph/' , graphFileName
)

writeBinarySyndefOf: anObject to: aFileName = (
	aFileName writeBinaryFile: [ :stream |
	    (ScGraph from: anObject withName: 'tmp') encodeSyndefOn: stream
	]
)

writeTextSyndefOf: anObject to: aFileName = (
	aFileName writeTextFile: [ :stream |
	    (ScGraph from: anObject withName: 'tmp') printSyndefOn: stream
	]
)

writeTmpWrappedBinarySyndefOf: anObject = (
	Sc3 writeBinarySyndefOf: (WrapOut bus: 0 channelsArray: anObject) to: '/tmp/stsc3.scsyndef'
)

writeTmpWrappedTextSyndefOf: anObject = (
	Sc3 writeTextSyndefOf: (WrapOut bus: 0 channelsArray: anObject) to: '/tmp/stsc3.scsyndef.text'
)

comment = (
	^'SuperCollider 3'
)

)
