ScUgen = Object (

| name numChan rate specialIndex id inputArray mrg |

addToUgenSet: c protectedBy: w = (
	"Add myself, and my inputs and mrg fields, to c if I am not in w."
	(w includes: self) ifFalse: [
		c add: self.
		inputArray do: [ :item | item addToUgenSet: c protectedBy: w ].
		mrg do: [ :item | item addToUgenSet: c protectedBy: c ] ]
)

encodeForSyndef: aGraph on: aStream = (
	aStream pascalString: name; int8: rate; int32: inputArray size; int32: numChan; int16: specialIndex.
	inputArray do: [ :input | (aGraph ugenInputSpec: input) do: [ :item | aStream int32: item ] ].
	numChan timesRepeat: [ aStream int8: rate ]
)

id = (
	^id
)

id: aNumber = (
	id := aNumber
)

kr = (
	(rate = Rate ar) ifTrue: [rate := Rate kr].
	inputArray kr.
	^self
)

mrg: rhs = (
	rhs asArray do: [ :item | mrg add: item ].
	^self
)

name = (
	^name
)

name: nm numChan: nc rate: rt specialIndex: ix inputArray: in = (
	name := nm.
	numChan := nc.
	rate := rt.
	specialIndex := ix.
	id := Sc3 nextId.
	inputArray := in.
	mrg := Set new
)

printForSyndef: aGraph on: aStream = (
	aStream << name << ' ' << rate << ' ' << inputArray size << ' ' << numChan << ' ' << specialIndex << ' '.
	inputArray do: [ :input | (aGraph ugenInputSpec: input) do: [ :item | aStream << item << ' ' ] ].
	numChan timesRepeat: [ aStream << rate << ' ' ]
)

rate = (
	^rate
)

rate: aNumber = (
	rate := aNumber
)

----------------------------

name: nm numChan: nc rate: rt specialIndex: ix inputArray: in = (
	^self new name: nm numChan: nc rate: rt specialIndex: ix inputArray: in
)

comment = (
	^'SuperCollider unit generator.  The id field is used to sort unit generators into applicative order.'
)

)
