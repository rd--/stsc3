Number = Number (

% aNumber = (
	"% is the Sc floating point modulo operator."
	aNumber isUgen ifTrue: [ ^BinaryOpUgen selector: #% a: self b: aNumber ] ifFalse: [ ^self \\ aNumber ]
)

addToUgenSet: c protectedBy: w = (
	c add: self.
	^self
)

ampDb = (
	"Linear amplitude to decibels"
	^(self log: 10) * 20
)

centiSeconds = (
	^ Duration seconds: (self / 100)
)

coin = (
	"With probability of myself return true, with probability of 1 - myself return false."
	^1.0 randomFloat < self
)

cpsMidi = (
	"Cycles per second to fractional midi note number."
	^(((self * (1 / 440)) log: 2) * 12) + 69
)

dbAmp = (
	"Decibels to linear amplitude"
	^10 raisedTo: (self * 0.05)
)

div: aNumber = (
	^self // aNumber
)

expRand: upperBound = (
	"Generate a random float with exponential distribution between myself and upperBound (inclusive)"
	^1.0 randomFloat linExpFrom: self to: upperBound
)


fibonacciSequence = (
	"First self elements of the Fibonacci sequence."
	| a b i temp answer |
	a := 0. b := 1. i := 0. temp := nil. answer := OrderedCollection new.
	[ i < self ] whileTrue: [
		answer add: b.
		temp := b.
		b := a + b.
		a := temp.
		i := i + 1
	].
	^answer
)

fibonacciArray = (
	^self fibonacciSequence asArray
)

kr = (
	^self
)

linExpFrom: lo to: hi = (
	"Myself (I am in range 0 to 1) mapped to the indicated range following an exponential curve."
	^lo * ((hi / lo) ln * self) exp
)

midiCps = (
	"Convert from fractional midi note number to frequency (in hertz)"
	^440 * (2 raisedTo: ((self - 69) * (1 / 12)))
)

midiRatio = (
	"Convert from fractional midi interval to ratio"
	^2 raisedTo: (self * (1 / 12))
)

randomFloat = (
	"Generate a random float between zero and myself (inclusive)"
	^self asFloat randomFloat
)

randomFloat: upperBound = (
	"Generate a random float between myself and upperBound (inclusive)"
	^self asFloat randomFloat: upperBound
)

rand = (
	^self randomFloat
)

rand: upperBound = (
	^self randomFloat: upperBound
)

rand2 = (
	^(self negated) randomFloat: self
)

rate = (
	^Rate ir
)

recip = (
	"Alias for Sc3."
	^self reciprocal
)

to: stop collect: aBlock = (
	^(self to: stop) collect: aBlock
)

to: stop select: aBlock = (
	^(self to: stop) select: aBlock
)

to: stop by: step collect: aBlock = (
	^(self to: stop by: step) collect: aBlock
)

to: stop by: step select: aBlock = (
	^(self to: stop by: step) select: aBlock
)

wrap: lo hi: hi = (
	"Wrap myself between lo and hi.  Avoid divide if possible."
	| in range |
	in := self.
	(in >= hi) ifTrue: [
		range := hi - lo.
		in := in - range.
		(in < hi) ifTrue: [ ^ in ]
	] ifFalse: [
		(in < lo) ifTrue: [
			range := hi - lo.
			in := in + range.
			(in >= lo) ifTrue: [ ^ in ]
		] ifFalse: [
			^ in
		]
	].
	(hi == lo) ifTrue: [ ^ lo ].
	^ in - (range * ((in - lo) / range) floor)
)

)
