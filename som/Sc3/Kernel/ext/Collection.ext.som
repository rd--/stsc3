Collection = Collection (

% arg = (
	^arg adaptToCollection: self andSend: #%
)

** arg = (
	^arg adaptToCollection: self andSend: #**
)

abs = (
	^self collect: [ :item | item abs ]
)

addToUgenSet: c protectedBy: w = (
	self do: [ :item | item addToUgenSet: c protectedBy: w]
)

containsCollection = (
	^self anySatisfy: [ :item | item isCollection ]
)

cos = (
	^self collect: [ :item | item cos ]
)

cpsMidi = (
	^self collect: [ :item | item cpsMidi ]
)

cubed = (
	^self collect: [ :item | item cubed ]
)

dbAmp = (
	^self collect: [ :item | item dbAmp ]
)

distort = (
	^self collect: [ :item | item distort ]
)

exp = (
	^self collect: [ :item | item exp ]
)

frac = (
	^self collect: [ :item | item frac ]
)

kr = (
	self do: [ :item | item kr].
	^self
)

log = (
	^self collect: [ :item | item log ]
)

maxItem = (
	"Sc synonym"
	^self max
)

mean = (
	"Sum of myself divided by my size."
	^self sum / self size
)

midiCps = (
	^self collect: [ :item | item midiCps ]
)

midiRatio = (
	^self collect: [ :item | item midiRatio ]
)

mrg: rhs = (
	(self detect: [ :item | item isUgen] ifNone: [ self error: 'mrg?' ]) mrg: rhs.
	^self
)

negated = (
	^self collect: [ :item | item negated ]
)

product = (
	"All of my elements multiplied together."
	^self inject: 1 into: [ :accumulator :item | accumulator * item ]
)

rate = (
	^(self collect: [ :item | item rate ]) max
)

rounded = (
	^self collect: [ :item | item rounded ]
)

scaleNeg: arg = (
	^arg adaptToCollection: self andSend: #scaleNeg:
)

sin = (
	^self collect: [ :item | item sin ]
)

softClip = (
	^self collect: [ :item | item softClip ]
)

squared = (
	^self collect: [ :item | item squared ]
)

tanh = (
	^self collect: [ :item | item tanh ]
)

----

apply: anArray = (
	^ self newFrom: anArray
)

)
