Object = Object (

%% anInteger = (
	"Alias.  In .sl this is written !"
	^self dup: anInteger
)

%+ anInteger = (
	"Alias.  In .sl this is written !+"
	^(self dup: anInteger) sum
)

%~ anInteger = (
	"Alias.  In .sl this is written !^"
	^(self dup: anInteger) splay2
)

<% rhs = (
	"Alias.  In .sl this is written <!"
	^self mrg: rhs
)

ceil = (
	"Alias.  In .sl this is written Ceil"
	^self ceiling
)

apply: argumentsArray = (
	^self perform: (self primaryFactoryMethod) withArguments: argumentsArray
)

asArray = (
	^Array with: self
)

dup = (
	^self dup: 2
)

dup: anInteger = (
	^self dup: anInteger sending: #copy
)

dup: anInteger sending: aSelector = (
	"Answer an array of anInteger places, each filled by sending aSelector to myself."
	| answer |
	answer := Array new: anInteger.
	(1 to: anInteger) do: [ :index | answer at: index put: (self perform: aSelector) ].
	^answer
)

isUgen = (
	^false
)

postln = (
	Transcript show: self printString; cr
)

rank = (
	^0
)

shape = (
	^#()
)

)
