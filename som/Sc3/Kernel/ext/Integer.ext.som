Integer = Integer (

arithmeticSeries: start value: step = (
	"Generate an arithmetic series (ramp) of self places from start by step."
	^(1 to: self) collect: [ :item | (step * (item - 1)) + start ]
)

asBinaryDigits: numDigits = (
	| array |
	array := Array new: numDigits.
	1 to: numDigits do: [ :i |
		array at: (numDigits - i + 1) put: ((self bitShift: (1 - i)) bitAnd: 1)
	].
	^array
)

do: aBlock = (
	"Iterates function from 1 to self."
	| counter |
	counter := 1.
	^ [ counter <= self ] whileTrue: [ aBlock value: counter. counter := counter + 1 ]
)

fib = (
	^Array fib: self
)

from: start by: step = (
	^(start to: self - 1 * step + start by: step)
)

geometricSeries: start value: grow = (
	"Generate a geometric series (curve) of self places from start by grow."
	| accum |
	accum := start.
	^(1 to: self) collect: [ :unusedItem |
		| entry |
		entry := accum.
		accum := grow * accum.
		entry
	]
)

iota = (
	^(1 to: self)
)

randomInteger = (
	"Alias for atRandom.  Generate a random integer between 1 and myself (inclusive)."
	^self atRandom
)

randomInteger: upperBound = (
	"Generate a random integer between myself and upperBound (inclusive)."
	^(upperBound - self + 1) atRandom + self - 1
)

to: aNumber collect: aBlock = (
	^(self to: aNumber) collect: aBlock
)

upOrDownTo: aNumber = (
	^self to: aNumber by: ((aNumber > self) ifTrue: [ 1 ] ifFalse: [ 2 ])
)

)
