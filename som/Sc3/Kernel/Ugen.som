Ugen = Object (

| scUgen port |

** aNumber = (
	^self raisedTo: aNumber
)

@ aUgen = (
	^Point x: self y: aUgen
)

<< aUgen = (
	^self shiftLeft: aUgen
)

adaptToCollection: rcvr andSend: selector = (
	^rcvr collect: [ :item | item perform: selector with: self]
)

adaptToFloat: rcvr andSend: selector = (
	^BinaryOpUgen selector: selector a: rcvr b: self
)

adaptToFraction: rcvr andSend: selector = (
	^BinaryOpUgen selector: selector a: rcvr b: self
)

adaptToInteger: rcvr andSend: selector = (
	^BinaryOpUgen selector: selector a: rcvr b: self
)

add: x = (
	  ^x = 0 ifTrue: [ self ] ifFalse: [ self + x ]
)

addToUgenSet: c protectedBy: w = (
	scUgen addToUgenSet: c protectedBy: w
)

bufClear = (
	"ClearBuf does not copy the buffer number through.  This form is an Mrg node."
	^self mrg: (ClearBuf buf: self)
)

draw = (
	Sc3 draw: self
)

expRange: lo value: hi = (
	"Allow .stc notation p.expRange(q, r).
	This is a very common idiom.
	In Sc this also adjusts for some unipolar inputs, which doesn't seem like a very good idea in general."
	^self linExpFrom: lo to: hi
)

idiv: arg = (
	^self // arg
)

isOutUgen = (
	^scUgen name = 'Out'
)

isUgen = (
	^true
)

isZero = (
	^false
)

kr = (
	scUgen kr.
	^self
)

lag: lagTime = (
	^Lag in: self lagTime: lagTime
)

lag2: lagTime = (
	^Lag2 in: self lagTime: lagTime
)

lag3: lagTime = (
	^Lag3 in: self lagTime: lagTime
)

linExpFrom: lo to: hi = (
	^LinExp in: self srclo: -1 srchi: 1 dstlo: lo dsthi: hi
)

linLinFrom: lo to: hi = (
	^LinLin in: self srclo: -1 srchi: 1 dstlo: lo dsthi: hi
)

ln = (
	^self log
)

mrg: rhs = (
	scUgen mrg: rhs.
	^self
)

mul: x = (
	  ^x = 1 ifTrue: [ self ] ifFalse: [ self * x ]
)

mul: mul add: add = (
	^(self mul: mul) add: add
)

mulAdd: mul value: add = (
	^(self mul: mul) add: add
)

neg = (
	  ^self negated
)

play = (
	Sc3 play: self
)

port = (
	^port
)

printUgens = (
	Sc3 printUgens: self
)

range: lo value: hi = (
	"Allow .stc notation p.range(q, r).
	This is a very common idiom.
	In Sc this also adjusts for some unipolar inputs, which doesn't seem like a very good idea in general."
	^self linLinFrom: lo to: hi
)

rate = (
	^scUgen rate
)

recip = (
	"Alias for Sc3."
	^self reciprocal
)

rounded = (
	^self roundTo: 1.0
)

scUgen = (
	^scUgen
)

scUgen: anScUgen port: anInteger = (
	scUgen := anScUgen.
	port := anInteger
)

splay2 = (
	^Splay2 inArray: self
)

trunc: b = (
	^self truncateTo: b
)

unitCps = (
	^(self * 100) midiCps
)

----------------------------

scUgen: anScUgen port: anInteger = (
	^self new scUgen: anScUgen port: anInteger
)

comment = (
	^'Output proxy'
)

)
