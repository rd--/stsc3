SmallInteger = SmallInteger (

+ aNumber = (
	<primitive: VMpr_SmallInteger_plus>
	 aNumber isSmallInteger ifTrue: [ ^(LargeInteger fromInteger: self) + (LargeInteger fromInteger: aNumber) ].
	^ aNumber adaptToInteger: self andSend: #+
)

- aNumber = (
	<primitive: VMpr_SmallInteger_minus>
	aNumber isSmallInteger ifTrue: [ ^(LargeInteger fromInteger: self) - (LargeInteger fromInteger: aNumber) ].
	^ aNumber adaptToInteger: self andSend: #-
)

* aNumber = (
	<primitive: VMpr_SmallInteger_times>
	 aNumber isSmallInteger ifTrue: [ ^(LargeInteger fromInteger: self) * (LargeInteger fromInteger: aNumber) ].
	^ aNumber adaptToInteger: self andSend: #*
)

/ aNumber = (
	"The primitive answers integer results, i.e. 4 / 2.  Avoid fractions..."
	<primitive: VMpr_SmallInteger_divide>
 	^ self asFloat / aNumber
)

printHexByte = (
	(self > 255 or: self < 0) ifTrue: [ self error: 'SmallInteger>>printHexByte' ].
	^self printPaddedWith: $0 to: 2 base: 16
)

)

