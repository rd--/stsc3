SequenceableCollection = SequenceableCollection (

any: numberOfElements = (
	^ self first: numberOfElements
)

append: operand = (
	^self , operand
)

atWrap: index = (
	^self at: index - 1 \\ self size + 1
)

concatenation = (
	| result index |
	result := Array new: (self inject: 0 into: [ :sum :each | sum + each size ]).
	index := 0.
	self do: [ :each | each do: [ :item | result at: (index := index + 1) put: item ] ].
	^result
)

do: elementBlock separatedBy: separatorBlock = (
	1 to: self size do:
		[:index |
		index = 1 ifFalse: [separatorBlock value].
		elementBlock value: (self at: index)]
)

joinOn: stream separatedBy: aSeparator = (
	self
		do: [:ea | stream nextPutAll: ea asString]
		separatedBy: [stream nextPutAll: aSeparator asString].
)

joinSeparatedBy: aSeparator = (
	^ String streamContents: [:stream |
		self joinOn: stream separatedBy: aSeparator]
)

reversed = (
	^ self reverse
)

shuffle = (
	^self fisherYatesShuffle
)

shuffled = (
	^self copy shuffle
)

splitBy: aCollection = (
	^Array streamContents:[:stream|
		self splitBy: aCollection do:[:each| stream nextPut: each].
	]
)

splitBy: aCollection do: aBlock = (
	| lastIndex nextIndex |
	lastIndex := 1.
	[nextIndex := self indexOfSubCollection: aCollection startingAt: lastIndex.
	nextIndex = 0] whileFalse:[
		aBlock value: (self copyFrom: lastIndex to: nextIndex-1).
		lastIndex := nextIndex+ aCollection size.
	].
	aBlock value: (self copyFrom: lastIndex to: self size).
)

take: maxNumberOfElements = (
	"Returns maxNumberOfElements as a new collection (using my #species) or less if the collection is not large enough."
	^ self any: (maxNumberOfElements min: self size)
)

withIndexCollect: elementAndIndexBlock = (
	| result |
	result := self species new: self size.
	1 to: self size do: [ :index | result at: index put: (elementAndIndexBlock value: (self at: index) value: index) ].
	^result
)

withIndexDo: elementAndIndexBlock = (
	1 to: self size do: [ :index | elementAndIndexBlock value: (self at: index) value: index ]
)

----

new: newSize streamContents: blockWithArg = (
	| stream originalContents |
	stream := WriteStream on: (self new: newSize).
	blockWithArg value: stream.
	originalContents := stream originalContents.
	originalContents size =  stream position
		ifTrue: [ ^originalContents ]
		ifFalse: [ ^stream contents ]
)

)

