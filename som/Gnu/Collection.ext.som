Collection = Collection (

* arg = (
	^arg adaptToCollection: self andSend: #*
)

+ arg = (
	^arg adaptToCollection: self andSend: #+
)

- arg = (
	^arg adaptToCollection: self andSend: #-
)

/ arg = (
	^arg adaptToCollection: self andSend: #/
)

// arg = (
	^arg adaptToCollection: self andSend: #//
)

adaptToCollection: rcvr andSend: selector = (
	rcvr isSequenceable & self isSequenceable ifFalse: [self error: 'Only sequenceable collections may be combined arithmetically'].
	^rcvr withExtending: self collect: [:rcvrElement :myElement | rcvrElement perform: selector with: myElement]
)

adaptToNumber: rcvr andSend: selector = (
	^ self collect: [:element | rcvr perform: selector with: element]
)

any: numberOfElements = (
	^ self any: numberOfElements as: self species
)

any: numberOfElements as: aClass = (
	"Enumerate this collection and return the specified number of elements. Signals an error if this collection has not enough elements."
	| index result |
	index := 0.
	result := aClass new: numberOfElements.
	result fillFrom: self with: [:each |
		(index := index + 1) > numberOfElements
			ifTrue: [^ result]
			ifFalse: [each]].
	index = numberOfElements
		ifFalse: [self error: 'Not enough elements in this collection.'].
	^ result
)

fillFrom: aCollection with: aBlock = (
	"Evaluate aBlock with each of aCollections's elements as the argument.
	Collect the resulting values into self. Answer self."
	aCollection do: [ :each |
		self add: (aBlock value: each) ]
)

isCollection = (
	^true
)

ceiling = (
	^self collect: [ :each | each ceiling ]
)

log2 = (
	^self collect: [ :each | each log2 ]
)

max  = (
	^self inject: (self atRandom) into: [ :maximum :item | (maximum > item) ifTrue: [ maximum ] ifFalse: [ item ]]
)

raisedTo: arg = (
	^arg adaptToCollection: self andSend: #raisedTo:
)

reciprocal = (
	^self collect: [ :item | item reciprocal ]
)

sqrt = (
	^self collect: [ :item | item sqrt ]
)

sum = (
	^self inject: 0 into: [ :total :item | total + item ]
)

----

newFrom: aCollection = (
	"Answer an instance of me containing the same elements as aCollection."
	^ self withAll: aCollection
)

)
