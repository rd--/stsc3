ScGraph = (

| name ugenSeq constantSeq |

asByteArray = (
	^ByteArray streamContents: [ :aStream | self encodeOn: aStream ]
)

constantIndex: aNumber = (
	| answer |
	answer := constantSeq indexOf: (aNumber asFloat) ifAbsent: [ self error: ('cannot find index for number: ' , aNumber asString) ].
	^answer - 1
)

encode = (
	^self asByteArray
)

encodeOn: aStream = (
	aStream int32: ScGraph scgf; int32: 2; int16: 1; pascalString: name; int32: constantSeq size.
	constantSeq do: [ :item | aStream float32: item asFloat ].
	aStream int32: 0; int32: 0; int32: ugenSeq size.
	ugenSeq do: [ :item | item encodeForSyndef: self on: aStream ].
	aStream int32: 0
)

name: nm ugenSeq: us constantSeq: cs = (
	name := nm. ugenSeq := us. constantSeq := cs
)

printOn: aStream = (
	self printSyndefOn: aStream
)

printSyndefOn: aStream = (
	aStream << ScGraph scgf << ' ' << 2 << ' ' << 1 << ' ' << name << ' ' << constantSeq size << ' '.
	constantSeq do: [ :item | aStream << item asFloat << ' ' ].
	aStream << 0 << ' ' << 0 << ' ' << ugenSeq size << ' '.
	ugenSeq do: [ :item | item printForSyndef: self on: aStream ].
	aStream << 0
)

ugenIndex: aNumber = (
	^(ugenSeq findIndex: [ :item | item id = aNumber ]) - 1
)

ugenInputSpec: aValue = (
	aValue isNumber ifTrue: [
	    ^{-1. self constantIndex: aValue}
	] ifFalse: [
	    ^{self ugenIndex: (aValue scUgen id). aValue port - 1}
	]
)

----------------------------

from: anObject withName: aString = (
	| leafNodes ugens constants numLocalBufs maxLocalBufs ugenSeq constantSeq |
	leafNodes := (ScGraph ugenSetOf: anObject) asArray.
	ugens := (leafNodes reject: [ :item | item isNumber ]) sorted: [ :lhs :rhs | lhs id <= rhs id ].
	constants := leafNodes select: [ :item | item isNumber ].
	numLocalBufs := (ugens select: [ :item | item name = 'LocalBuf' ]) size.
	maxLocalBufs := UgenBuilder name: 'MaxLocalBufs' numChan: 1 rateSpec: Rate ir specialIndex: 0 inputArray: {numLocalBufs}.
	ugenSeq := {maxLocalBufs scUgen} , ugens.
	constantSeq := ({numLocalBufs} , constants) asSet asArray sorted collect: [ :item | item asFloat ].
	^ScGraph new name: aString ugenSeq: ugenSeq constantSeq: constantSeq
)

scgf = (
	"Encodes as the bytes SCgf"
	^1396926310
)

ugenSetOf: anObject = (
	| set |
	set := IdentitySet new.
	anObject addToUgenSet: set protectedBy: IdentitySet new.
	^set
)

comment = (
	^'SuperCollider unit generator graph.'
)

)
