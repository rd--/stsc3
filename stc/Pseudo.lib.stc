(* EnvGen of simplified EnvAdsr *)
Adsr : PseudoUgen {
	*constructor {
		arg gate = 1, attackTime = 0.01, decayTime = 0.3, sustainLevel = 0.5, releaseTime = 1, curves = -4;
		^EnvAdsr(attackTime, decayTime, sustainLevel, releaseTime, 1, curves).asEnvGen(gate)
	}
}

(* EnvGen of simplified EnvAsr *)
Asr : PseudoUgen {
	*constructor {
		arg gate = 1, attackTime = 0.01, releaseTime = 1, curves = -4;
		^EnvAsr(attackTime, 1, releaseTime, curves).asEnvGen(gate)
	}
}

(* Audio input *)
AudioIn : PseudoUgen {
	*constructor {
		arg channels;
		^In(1, NumOutputBuses() + channels - 1)
	}
}

(* Bipolar linear to linear mapping *)
Bilin : PseudoUgen {
	*constructor {
		arg in, inCenter, inMin, inMax, outCenter, outMin, outMax;
		var below = LinLin(in, inMin, inCenter, outMin, outCenter);
		var above = LinLin(in, inCenter, inMax, outCenter, outMax);
		^Select2(in < inCenter, below, above)
	}
}

BHiPass4 : PseudoUgen {
	*constructor {
		arg in, freq = 1200.0, rq = 1.0;
		var rqSqrt = rq.sqrt;
		^BHiPass(BHiPass(in, freq, rqSqrt), freq, rqSqrt)
	}
}

BLowPass4 : PseudoUgen {
	*constructor {
		arg in, freq = 1200.0, rq = 1.0;
		var rqSqrt = rq.sqrt;
		^BLowPass(BLowPass(in, freq, rqSqrt), freq, rqSqrt)
	}
}

(* Allocate a buffer local to the synth *)
BufAlloc : PseudoUgen {
	*constructor {
		arg numChannels, numFrames;
		^LocalBuf(numChannels, numFrames)
	}
}

(* Record signal into a Buffer *)
BufRec : PseudoUgen {
	*constructor {
		arg bufnum, reset, inputArray;
		^RecordBuf(bufnum, 0, 1, 0, 1, 1, reset, 0, inputArray)
	}
}

(* Buffer writing oscillator *)
BufWrite : PseudoUgen {
	*constructor {
		arg bufnum, phase, loop, inputArray;
		^BufWr(bufnum, phase, loop, inputArray)
	}
}

(* Continuous controller input *)
Cc : PseudoUgen {
	*constructor {
		arg index;
		^In(1, 11000 + index).kr
	}
}

(* Triggers when a value changes *)
Changed : PseudoUgen {
	*constructor {
		arg input, threshold;
		^Hpz1(input).abs > threshold
	}
}

(* Random sequence generator *)
Choose : PseudoUgen {
	*constructor {
		arg repeats, list;
		^Drand(repeats, list)
	}
}

(* Curve Segment Envelope *)
CurveGen : PseudoUgen {
	*constructor {
		arg gate, levels, times, curves;
		^EnvSpec(
			[levels.first] ++ levels,
			[0] ++ times,
			[0] ++ curves.extendCyclically(times.size),
			nil,
			nil,
			0
		).asEnvGen(gate)
	}
}

(* Curve Segment Envelope *)
CurveSeg : PseudoUgen {
	*constructor {
		arg gate, coord;
		var levels = 1.to(coord.size, by: 3).collect({ arg i; coord.at(i) });
		var times = 2.to(coord.size, by: 3).collect({ arg i; coord.at(i) });
		var curves = 3.to(coord.size, by: 3).collect({ arg i; coord.at(i) });
		^CurveGen(gate, levels, times, curves)
	}
}

(* EnvGen of simple cutoff envelope *)
Cutoff : PseudoUgen {
	*constructor {
		arg sustainTime, releaseTime, curve;
		^EnvSpec(#[1, 1, 0], [sustainTime, releaseTime], curve, nil, nil, 0).asEnvGen
	}
}

(* Demand with duration input (Duty) *)
DmdFor : PseudoUgen {
	*constructor {
		arg dur, reset, level;
		^Duty(dur, reset, 0, level)
	}
}

(* Demand with trigger input (Demand) *)
DmdOn : PseudoUgen {
	*constructor {
		arg trig, reset, demandUGens;
		^Demand(trig, reset, demandUGens)
	}
}

(* Dynamic klank, set of non-fixed resonating filters *)
DynKlank : PseudoUgen {
	*constructor {
		arg input, freqscale, freqoffset, decayscale, specificationsArrayRef;
		var gen;
		gen = {
		    arg ix;
		    var f = specificationsArrayRef.at(ix);
		    var a = specificationsArrayRef.at(ix + 1);
		    var d = specificationsArrayRef.at(ix + 2);
		    Ringz(input, f * freqscale + freqoffset, d * decayscale) * a
		};
		^1.to(specificationsArrayRef.size, by: 3).collect(gen).sum
	}
}

(* Dynamic parallel bank of Ringz *)
DynRingzBank : PseudoUgen {
	*constructor {
		arg input, freq, amp, time;
		^DynKlank(input, 1, 0, 1, [freq, amp, time].asKlankSpec)
	}
}

EnvRelease {
	*constructor {
		arg attackTime = 0.02, dur = 5, releaseTime = 0.02;
		var e = EnvSpec([0, 1, 1, 0], [attackTime, dur, releaseTime], ['lin'], nil, nil, 0);
		^EnvGen(1, 1, 0, 1, 2, e.coordinateArrayForEnvGen)
	}
}

(* Read signal from a bus with a current or one cycle old timestamp *)
InFb : PseudoUgen {
	*constructor {
		arg numChan, bus;
		^InFeedback(numChan, bus)
	}
}

(* Key down control input for indicated voice (W) *)
KeyDown : PseudoUgen {
	*constructor {
		arg voiceNumber;
		^ControlIn(1, Voicer.voiceAddr(voiceNumber) + 0)
	}
}

(* Key pitch control input for indicated voice *)
KeyPitch : PseudoUgen {
	*constructor {
		arg voiceNumber;
		^ControlIn(1, Voicer.voiceAddr(voiceNumber) + 7)
	}
}

(* Key timbre control input for indicated voice (Y) *)
KeyTimbre : PseudoUgen {
	*constructor {
		arg voiceNumber;
		^ControlIn(1, Voicer.voiceAddr(voiceNumber) + 2)
	}
}

(* Key velocity control input for indicated voice (Z) *)
KeyVelocity : PseudoUgen {
	*constructor {
		arg voiceNumber;
		^ControlIn(1, Voicer.voiceAddr(voiceNumber) + 3)
	}
}

(* Line Segment Envelope *)
LinGen : PseudoUgen {
	*constructor {
		arg gate, levels, times;
		^CurveGen(gate, levels, times, #['lin'])
	}
}

(* Map a linear range to a linear range *)
LinLin : PseudoUgen {
	*constructor {
		arg in, srclo, srchi, dstlo, dsthi;
		^(in - srclo) / (srchi - srclo) * (dsthi - dstlo) + dstlo
	}
}

(* Line Segment Envelope *)
LinSeg : PseudoUgen {
	*constructor {
		arg gate, coordArray;
		var levels = 1.to(coordArray.size, by: 2).collect({ arg i; coordArray.at(i) });
		var times = 2.to(coordArray.size, by: 2).collect({ arg i; coordArray.at(i) });
		^LinGen(gate, levels, times)
	}
}

(* Line generator *)
Ln : PseudoUgen {
	*constructor {
		arg start, end, dur;
		^Line(start, end, dur, 0)
	}
}

Mix : PseudoUgen {
	*constructor {
		arg inputArray;
		^inputArray.sum
	}
}

(* An oscillator that reads through a table once *)
Osc1 : PseudoUgen {
	*constructor {
		arg bufnum, dur;
		var phase = Ln(0, BufFrames(bufnum) - 1, dur);
		^BufRd(1, bufnum, phase, 0, 2)
	}
}

(* Texture generator *)
OverlapTexture : PseudoUgen {
	*constructor {
		arg graphFunc, sustainTime, transitionTime, overlap;
		var voiceFunc = {
		    arg i;
		    var t = Impulse(1 / (sustainTime + (transitionTime * 2)), i / overlap).kr;
		    graphFunc(t) * EnvLinen(transitionTime, sustainTime, transitionTime, 1, 'sin').asEnvGen(t)
		};
		^1.to(overlap, collect: voiceFunc).sum
	}
}

(* Pen angle *)
PenAngle : PseudoUgen {
	*constructor {
		arg voiceNumber;
		^ControlIn(1, Voicer.voiceAddr(voiceNumber) + 4)
	}
}

(* Pen down (W) *)
PenDown : PseudoUgen {
	*constructor {
		arg voiceNumber;
		^ControlIn(1, Voicer.voiceAddr(voiceNumber) + 0)
	}
}

(* Pen radius *)
PenRadius : PseudoUgen {
	*constructor {
		arg voiceNumber;
		^ControlIn(1, Voicer.voiceAddr(voiceNumber) + 5)
	}
}

(* Pen X *)
PenX : PseudoUgen {
	*constructor {
		arg voiceNumber;
		^ControlIn(1, Voicer.voiceAddr(voiceNumber) + 1)
	}
}

(* Pen Y *)
PenY : PseudoUgen {
	*constructor {
		arg voiceNumber;
		^ControlIn(1, Voicer.voiceAddr(voiceNumber) + 2)
	}
}

(* Pen Z *)
PenZ : PseudoUgen {
	*constructor {
		arg voiceNumber;
		^ControlIn(1, Voicer.voiceAddr(voiceNumber) + 3)
	}
}

(* EnvGen of EnvPerc without level input *)
Perc : PseudoUgen {
	*constructor {
		arg trig, attackTime = 0.01, releaseTime = 1, curve = -4;
		^EnvPerc(attackTime, releaseTime, 1, curve).asEnvGen(trig)
	}
}

(* Phase modulation sine oscillator pair *)
PmOsc : PseudoUgen {
	*constructor {
		arg carfreq, modfreq, pmindex, modphase;
		^SinOsc(carfreq, SinOsc(modfreq, modphase) * pmindex)
	}
}

Release {
	*constructor {
		arg in, attackTime = 0.02, dur = 5, releaseTime = 0.02;
		^in * EnvRelease(attackTime, dur, releaseTime)
	}
}

(* Parallel bank of Ringz *)
RingzBank : PseudoUgen {
	*constructor {
		arg input, freq, amp, time;
		^Klank(input, 1, 0, 1, [freq, amp, time].asKlankSpec)
	}
}

(* Select one of two branches based on predicate signal *)
Select2 : PseudoUgen {
	*constructor {
		arg predicate, ifTrue, ifFalse;
		^(predicate * (ifTrue - ifFalse)) + ifFalse
	}
}

(* Mix one output from many sources *)
SelectX : PseudoUgen {
	*constructor {
		arg which, array;
		^XFade2(
		    Select(which.roundTo(2), array),
		    Select(which.truncateTo(2) + 1, array),
		    (which * 2 - 1).fold2(1),
		    1)
	}
}

(* Sequence generator *)
Seq : PseudoUgen {
	*constructor {
		arg repeats, list;
		^Dseq(repeats, list)
	}
}

(* Demand rate sequence generator. *)
Ser : PseudoUgen {
	*constructor {
		arg repeats, list;
		^Dser(repeats, list)
	}
}

Series : PseudoUgen {
	*constructor {
		arg start, step, length;
		^Dseries(start, step, length)
	}
}

(* Demand rate random sequence generator *)
Shuf : PseudoUgen {
	*constructor {
		arg repeats, list;
		^Dshuf(repeats, list)
	}
}

Sine : PseudoUgen {
	*constructor {
		arg trig, dur = 1;
		^ Env(
			[0, 0, 1, 0],
			[0, dur / 2, dur / 2],
			'sine',
			nil,
			1,
			0
		).asEnvGen(trig)
	}
}

(* Parallel bank of SinOsc *)
SinOscBank : PseudoUgen {
	*constructor {
		arg freq, amp, phase;
		^Klang(1, 0, [freq, amp, phase].asKlangSpec)
	}
}

(* Pan an array of channels across the stereo field *)
Splay : PseudoUgen {
	*constructor {
		arg inArray, spread = 1, level = 1, center = 0, levelComp;
		var n = 2.max(inArray.size);
		var n1 = n - 1;
		var pos = (0.to(n1) * (2 / n1) - 1) * spread + center;
		var lvl = levelComp.ifTrue({
		    level * n.reciprocal.sqrt
		}, ifFalse: {
		    level
		});
		^Pan2(inArray, pos, lvl).sum
	}
}

(* Pan an array of channels across the stereo field *)
Splay2 : PseudoUgen {
	*constructor {
		arg inArray;
		^Splay(inArray, 1, 1, 0, true)
	}
}

(* Switch (maintained or momentary) controller input *)
Sw : PseudoUgen {
	*constructor {
		arg index;
		^In(1, 12000 + index).kr
	}
}

(* Randomly select one of several inputs on trigger *)
TChoose : PseudoUgen {
	*constructor {
		arg trig, array;
		^Select(TiRand(0, array.size - 1, trig), array)
	}
}

(* Demand with duration input (TDuty) *)
TDmdFor : PseudoUgen {
	*constructor {
		arg dur, reset, level;
		^TDuty(dur, reset, 0, level, 0)
	}
}

(* Triggered Line *)
TLine : PseudoUgen {
	*constructor {
		arg start, end, dur, trig;
		^EnvSpec([start, start, end], [0, dur], #['lin', 'lin'], -1, -1, 0).asEnvGen(trig)
	}
}

(* Trig1 with duration of one sample *)
Tr1 : PseudoUgen {
	*constructor {
		arg in;
		^Trig1(in, SampleDur())
	}
}

(* Trig with duration of one sample *)
Tr : PseudoUgen {
	*constructor {
		arg in;
		^Trig(in, SampleDur()) ;; Should be SampleDur if audio rate and ControlDur if control rate, requires QuantaDur or some such
	}
}

(* Triggered XLine *)
TxLine : PseudoUgen {
	*constructor {
		arg start, end, dur, trig;
		^EnvSpec([start, start, end], [0, dur], #['exp', 'exp'], -1, -1, 0).asEnvGen(trig)
	}
}

(* Wrap signal in an Out Ugen if required *)
WrapOut : PseudoUgen {
	*constructor {
		arg bus, channelsArray;
		channelsArray.isArray.not.and({ channelsArray.isOutUgen }).ifTrue({
		    ^channelsArray
		}, ifFalse: {
		    ^Out(bus, channelsArray)
		})
	}
}

(* EnvGen of simplified EnvAdsr *)
Adsr : PseudoUgen {
	*constructor {
		arg gate = 1, attackTime = 0.01, decayTime = 0.3, sustainLevel = 0.5, releaseTime = 1, curves = -4;
		^EnvAdsr(attackTime, decayTime, sustainLevel, releaseTime, 1, curves).asEnvGen(gate)
	}
}

(* EnvGen of simplified EnvAsr *)
Asr : PseudoUgen {
	*constructor {
		arg gate = 1, attackTime = 0.01, releaseTime = 1, curves = -4;
		^EnvAsr(attackTime, 1, releaseTime, curves).asEnvGen(gate)
	}
}

(* Audio input *)
AudioIn : PseudoUgen {
	*constructor {
		arg channelsArray;
		^In(1, NumOutputBuses() + channelsArray - 1)
	}
}

(* Bipolar linear to linear mapping *)
Bilin : PseudoUgen {
	*constructor {
		arg in, inCenter, inMin, inMax, outCenter, outMin, outMax;
		var below = LinLin(in, inMin, inCenter, outMin, outCenter);
		var above = LinLin(in, inCenter, inMax, outCenter, outMax);
		^Select2(in < inCenter, below, above)
	}
}

(* Allocate a buffer local to the synth *)
BufAlloc : PseudoUgen {
	*constructor {
		arg numChannels, numFrames;
		^LocalBuf(numChannels, numFrames)
	}
}

(* Record signal into a Buffer *)
BufRec : PseudoUgen {
	*constructor {
		arg bufnum, reset, inputArray;
		^RecordBuf(bufnum, 0, 1, 0, 1, 1, reset, 0, inputArray)
	}
}

(* Buffer writing oscillator *)
BufWrite : PseudoUgen {
	*constructor {
		arg bufnum = 0, phase = 0, loop = 1, inputArray;
		^BufWr(bufnum, phase, loop, inputArray)
	}
}

(* Continuous controller input *)
Cc : PseudoUgen {
	*constructor {
		arg index;
		^In(1, 11000 + index).kr
	}
}

(* Triggers when a value changes *)
Changed : PseudoUgen {
	*constructor {
		arg input, threshold;
		^Hpz1(input).abs > threshold
	}
}

(* Random sequence generator *)
Xchoose : PseudoUgen {
	*constructor {
		arg repeats = 1, list;
		^Dxrand(repeats, list)
	}
}

(* Line generator *)
XLn : PseudoUgen {
	*constructor {
		arg start = 1, end = 2, dur = 1;
		^XLine(start, end, dur, 0)
	}
}

DelayWrite : PseudoUgen {
	*constructor {
		arg bufnum, in;
		^RecordBuf(bufnum, 0, 1, 0, 1, 1, 1, 0, [in])
	}
}

DelayTap : PseudoUgen {
	*constructor {
		arg bufnum, delayTime;
		^PlayBuf(1, bufnum, 1, 1, BufDur(bufnum) - delayTime * SampleRate(), 1, 0)
	}
}

Sequencer : PseudoUgen {
	*constructor {
		arg valueArray, trig;
		^DmdOn(trig, 0, Seq(inf, valueArray))
	}
}

ImpulseSequencer : PseudoUgen {
	*constructor {
		arg valueArray, trig;
		^Sequencer(valueArray, trig) * trig
	}
}

(* Random sequence generator *)
White : PseudoUgen {
	*constructor {
		arg length, lo = 0, hi = 1;
		^Dwhite(length, lo, hi)
	}
}

Mul : PseudoUgen {
	*constructor {
		arg in, mul = 1;
		^in * mul
	}
}

Add : PseudoUgen {
	*constructor {
		arg in, add = 0;
		^in + add
	}
}

EqPan2 : PseudoUgen {
	*constructor {
		arg in, pos = 0;
		^Pan2(in, pos, 1)
	}
}
